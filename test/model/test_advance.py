import textwrap

import pytest

from countryroad.utils.test import *


@pytest.mark.parametrize("evolution", [
    # Won't overtake because of ongoing traffic
    textwrap.dedent("""\
        _
        #   |     |     |     |
        3   |     |     |     |
            | #   |     |   0 |
            | 3   |   0 |   # |
            |   0 | # # |   # |
          0 |   # | 3 # |   # |
          # |   # |   # | #   |
          # |   # |     | 3   |
          # |     |     |     |
            |     |     |     |
            |     |     |   1 |
            |     |   1 |   # |
            |   1 |   # |   # |
          1 |   # |   # |   # |
          # |   # |   # |     |
          # |   # |     |     |
          # |     |     |   2 |
            |     |   2 |   # |
            |     |   # |     |
            |   2 |     |     |
            |   # |     |     |
          2 |     |     |     |
          # |     |     |     |
    """),
    # Will overtake
    textwrap.dedent("""\
        _
            |     |     |     |     |     |     |     |     |     |     |   0 |
            |     |     |     |     |     |     |     |     |     |   0 |   # |
            |     |     |     |     |     |     |     |     |   0 |   # |   # |
            |     |     |     |     |     |     |     |   0 |   # |   # |   # |
            |     |     |     |     |     |     |   0 |   # |   # |   # |     |
            |     |     |     |     |     |   0 |   # |   # |   # |     |   2 |
            |     |     |     |     |   0 |   # |   # |   # |     |     |   # |
            |     |     |     |   0 |   # |   # |   # |     |     | 2   |     |
            |     |     |   0 |   # |   # |   # |     |     |     | #   |     |
            |     |   0 |   # |   # |   # |     |     |     | 2   |   1 |   1 |
            |   0 |   # |   # |   # |     |     |     |     | # 1 |   # |   # |
          0 |   # |   # |   # |     |     |     |     | 2 1 |   # |   # |   # |
          # |   # |   # |     |     |     |     |   1 | # # |   # |   # |   # |
          # |   # |     |     |     |     |   1 | 2 # |   # |   # |     |     |
          # |     |     |     |     |   1 |   # | # # |   # |     |     |     |
            |     |     |     |   1 |   # | 2 # |   # |     |     |     |     |
            |     |     |   1 |   # |   # | # # |     |     |     |     |     |
            |     |   1 |   # |   # | 2 # |     |     |     |     |     |     |
            |   1 |   # |   # |   # | #   |     |     |     |     |     |     |
          1 |   # |   # |   # | 2   |     |     |     |     |     |     |     |
          # |   # |   # |     | #   |     |     |     |     |     |     |     |
          # |   # |     | 2   |     |     |     |     |     |     |     |     |
          # |     |     | #   |     |     |     |     |     |     |     |     |
            |     |   2 |     |     |     |     |     |     |     |     |     |
            |     |   # |     |     |     |     |     |     |     |     |     |
            |   2 |     |     |     |     |     |     |     |     |     |     |
            |   # |     |     |     |     |     |     |     |     |     |     |
          2 |     |     |     |     |     |     |     |     |     |     |     |
          # |     |     |     |     |     |     |     |     |     |     |     |
    """),
    # Will overtake despite oncoming traffic, then wait for oncoming traffic to pass
    # (and forcing the overtaken truck to wait to keep the distance) then begin overtaking again
    textwrap.dedent("""\
        _
        #   |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
        3   |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
            | #   |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
            | 3   |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
            |     | #   |     |     |     |     |     |     |     |     |     |     |     |     |     |
            |     | 3   |     |     |     |     |     |     |     |     |     |     |     |     |     |
            |     |     | #   |     |     |     |     |     |     |     |     |     |     |     |     |
            |     |     | 3   |     |     |     |     |     |     |     |     |     |     |     |     |
            |     |     |     | #   |     |     |     |     |     |     |     |     |     |     |     |
            |     |     |     | 3   |     |     |     |     |     |     |     |     |     |     |     |
            |     |     |     |     | #   |     |     |     |     |     |     |     |     |     |     |
            |     |     |     |     | 3   |     |     |     |     |     |     |     |     |     |     |
            |     |     |     |     |     | #   |     |     |     |     |     |     |     |     |     |
            |     |     |     |     |     | 3   |     |     |     |     |     |     |     |     |     |
            |     |     |     |     |     |     | #   |     |     |     |     |     |     |     |     |
            |     |     |     |     |     |     | 3   |     |     |     |     |     |     |     |     |
            |     |     |     |     |     |     |     | #   |     |     |     |     |     |     |     |
            |     |     |     |     |     |     |     | 3   |     |     |     |     |     |     |     |
            |     |     |     |     |     |     |     |     | #   |     |     |     |     |     |   0 |
            |     |     |     |     |     |     |     |     | 3   |     |     |     |     |   0 |   # |
            |     |     |     |     |     |     |     |     |     | #   |     |     |   0 |   # |   # |
            |     |     |     |     |     |     |     |     |     | 3   |     |   0 |   # |   # |   # |
            |     |     |     |     |     |     |     |     |     |     | # 0 |   # |   # |   # |     |
            |     |     |     |     |     |     |     |     |     |   0 | 3 # |   # |   # |     | 2   |
            |     |     |     |     |     |     |     |     |   0 |   # |   # | # # |     |     | #   |
            |     |     |     |     |     |     |     |   0 |   # |   # |   # | 3   |     |   2 |     |
            |     |     |     |     |     |     |   0 |   # |   # |   # |     |     | # 2 |   # |     |
            |     |     |     |     |     |   0 |   # |   # |   # |     |   2 |   2 | 3 # |     |     |
            |     |     |     |     |   0 |   # |   # |   # |     |     |   # |   # |     | #   |     |
            |     |     |     |   0 |   # |   # |   # |     |     | 2   |     |     |     | 3   |     |
            |     |     |   0 |   # |   # |   # |     |     |     | #   |     |     |     |     | # 1 |
            |     |   0 |   # |   # |   # |     |     |     | 2   |   1 |   1 |   1 |   1 |   1 | 3 # |
            |   0 |   # |   # |   # |     |     |     |     | # 1 |   # |   # |   # |   # |   # |   # |
          0 |   # |   # |   # |     |     |     |     | 2 1 |   # |   # |   # |   # |   # |   # |   # |
          # |   # |   # |     |     |     |     |   1 | # # |   # |   # |   # |   # |   # |   # |     |
          # |   # |     |     |     |     |   1 | 2 # |   # |   # |     |     |     |     |     |     |
          # |     |     |     |     |   1 |   # | # # |   # |     |     |     |     |     |     |     |
            |     |     |     |   1 |   # | 2 # |   # |     |     |     |     |     |     |     |     |
            |     |     |   1 |   # |   # | # # |     |     |     |     |     |     |     |     |     |
            |     |   1 |   # |   # | 2 # |     |     |     |     |     |     |     |     |     |     |
            |   1 |   # |   # |   # | #   |     |     |     |     |     |     |     |     |     |     |
          1 |   # |   # |   # | 2   |     |     |     |     |     |     |     |     |     |     |     |
          # |   # |   # |     | #   |     |     |     |     |     |     |     |     |     |     |     |
          # |   # |     | 2   |     |     |     |     |     |     |     |     |     |     |     |     |
          # |     |     | #   |     |     |     |     |     |     |     |     |     |     |     |     |
            |     |   2 |     |     |     |     |     |     |     |     |     |     |     |     |     |
            |     |   # |     |     |     |     |     |     |     |     |     |     |     |     |     |
            |   2 |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
            |   # |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
          2 |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
          # |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
    """)
])
def test_advance(evolution):
    reference_models = load_geometries(evolution)

    model = reference_models[0]
    for i, reference_model in enumerate(reference_models):
        dump1 = dump_geometry(reference_model)
        dump2 = dump_geometry(model)
        if dump1 != dump2:
            print(f"Error at step {i + 1}")
            print(join_geometry_dumps([dump1, dump2]))
            assert False

        try:
            model = model.advance()
        except Exception:
            print(f"Exception at step {i + 1}")
            print(join_geometry_dumps([dump1, dump2]))
            raise
